
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002058  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f8  080021f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080021f8  080021f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f8  080021f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000008  08002204  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08002204  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055d2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001021  00000000  00000000  00025606  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  00026628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  00026ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035b5  00000000  00000000  00027280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000044e6  00000000  00000000  0002a835  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075bb2  00000000  00000000  0002ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a48cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  000a4948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021c8 	.word	0x080021c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080021c8 	.word	0x080021c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa93 f3a3 	rbit	r3, r3
 800066a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	fab3 f383 	clz	r3, r3
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2103      	movs	r1, #3
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	401a      	ands	r2, r3
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	fa93 f3a3 	rbit	r3, r3
 8000688:	61bb      	str	r3, [r7, #24]
  return(result);
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	fab3 f383 	clz	r3, r3
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	431a      	orrs	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	3724      	adds	r7, #36	; 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	43db      	mvns	r3, r3
 80006be:	401a      	ands	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	431a      	orrs	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80006da:	b480      	push	{r7}
 80006dc:	b089      	sub	sp, #36	; 0x24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	fa93 f3a3 	rbit	r3, r3
 80006f4:	613b      	str	r3, [r7, #16]
  return(result);
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	fab3 f383 	clz	r3, r3
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2103      	movs	r1, #3
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	401a      	ands	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	fa93 f3a3 	rbit	r3, r3
 8000712:	61bb      	str	r3, [r7, #24]
  return(result);
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000728:	bf00      	nop
 800072a:	3724      	adds	r7, #36	; 0x24
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa93 f3a3 	rbit	r3, r3
 800074e:	613b      	str	r3, [r7, #16]
  return(result);
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	fab3 f383 	clz	r3, r3
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	401a      	ands	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	fa93 f3a3 	rbit	r3, r3
 800076c:	61bb      	str	r3, [r7, #24]
  return(result);
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	fab3 f383 	clz	r3, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	60da      	str	r2, [r3, #12]
}
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800078e:	b480      	push	{r7}
 8000790:	b089      	sub	sp, #36	; 0x24
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6a1a      	ldr	r2, [r3, #32]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa93 f3a3 	rbit	r3, r3
 80007a8:	613b      	str	r3, [r7, #16]
  return(result);
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	fab3 f383 	clz	r3, r3
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	210f      	movs	r1, #15
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	401a      	ands	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	fa93 f3a3 	rbit	r3, r3
 80007c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fab3 f383 	clz	r3, r3
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	431a      	orrs	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80007dc:	bf00      	nop
 80007de:	3724      	adds	r7, #36	; 0x24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa93 f3a3 	rbit	r3, r3
 8000804:	613b      	str	r3, [r7, #16]
  return(result);
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	210f      	movs	r1, #15
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	401a      	ands	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa93 f3a3 	rbit	r3, r3
 8000824:	61bb      	str	r3, [r7, #24]
  return(result);
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	fab3 f383 	clz	r3, r3
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	431a      	orrs	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800083a:	bf00      	nop
 800083c:	3724      	adds	r7, #36	; 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b088      	sub	sp, #32
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	fa93 f3a3 	rbit	r3, r3
 8000864:	613b      	str	r3, [r7, #16]
  return(result);
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	fab3 f383 	clz	r3, r3
 800086c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800086e:	e048      	b.n	8000902 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d03a      	beq.n	80008fc <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fede 	bl	8000650 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <LL_GPIO_Init+0x5e>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d106      	bne.n	80008b2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	461a      	mov	r2, r3
 80008aa:	69b9      	ldr	r1, [r7, #24]
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff14 	bl	80006da <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	461a      	mov	r2, r3
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff3a 	bl	8000734 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d119      	bne.n	80008fc <LL_GPIO_Init+0xb6>
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	fa93 f3a3 	rbit	r3, r3
 80008d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80008d4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d807      	bhi.n	80008ee <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	461a      	mov	r2, r3
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff51 	bl	800078e <LL_GPIO_SetAFPin_0_7>
 80008ec:	e006      	b.n	80008fc <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	461a      	mov	r2, r3
 80008f4:	69b9      	ldr	r1, [r7, #24]
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff76 	bl	80007e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3301      	adds	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa22 f303 	lsr.w	r3, r2, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1af      	bne.n	8000870 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d003      	beq.n	8000920 <LL_GPIO_Init+0xda>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d107      	bne.n	8000930 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	461a      	mov	r2, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff febd 	bl	80006aa <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	615a      	str	r2, [r3, #20]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <LL_TIM_Init+0xd4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d007      	beq.n	8000a84 <LL_TIM_Init+0x2c>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a7a:	d003      	beq.n	8000a84 <LL_TIM_Init+0x2c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	; (8000b30 <LL_TIM_Init+0xd8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d106      	bne.n	8000a92 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <LL_TIM_Init+0xd4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <LL_TIM_Init+0x6a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d00f      	beq.n	8000ac2 <LL_TIM_Init+0x6a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <LL_TIM_Init+0xd8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00b      	beq.n	8000ac2 <LL_TIM_Init+0x6a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <LL_TIM_Init+0xdc>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <LL_TIM_Init+0x6a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <LL_TIM_Init+0xe0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d003      	beq.n	8000ac2 <LL_TIM_Init+0x6a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <LL_TIM_Init+0xe4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d106      	bne.n	8000ad0 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4619      	mov	r1, r3
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff3a 	bl	8000956 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff26 	bl	800093a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LL_TIM_Init+0xd4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d00b      	beq.n	8000b0e <LL_TIM_Init+0xb6>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LL_TIM_Init+0xdc>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d007      	beq.n	8000b0e <LL_TIM_Init+0xb6>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LL_TIM_Init+0xe0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d003      	beq.n	8000b0e <LL_TIM_Init+0xb6>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <LL_TIM_Init+0xe4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d105      	bne.n	8000b1a <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	7c1b      	ldrb	r3, [r3, #16]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff2c 	bl	8000972 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff8b 	bl	8000a36 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	40000400 	.word	0x40000400
 8000b34:	40014000 	.word	0x40014000
 8000b38:	40014400 	.word	0x40014400
 8000b3c:	40014800 	.word	0x40014800

08000b40 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b56:	d01f      	beq.n	8000b98 <LL_TIM_OC_Init+0x58>
 8000b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b5c:	d804      	bhi.n	8000b68 <LL_TIM_OC_Init+0x28>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d00c      	beq.n	8000b7c <LL_TIM_OC_Init+0x3c>
 8000b62:	2b10      	cmp	r3, #16
 8000b64:	d011      	beq.n	8000b8a <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000b66:	e033      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8000b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b6c:	d022      	beq.n	8000bb4 <LL_TIM_OC_Init+0x74>
 8000b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b72:	d026      	beq.n	8000bc2 <LL_TIM_OC_Init+0x82>
 8000b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b78:	d015      	beq.n	8000ba6 <LL_TIM_OC_Init+0x66>
      break;
 8000b7a:	e029      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f000 f82c 	bl	8000bdc <OC1Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	75fb      	strb	r3, [r7, #23]
      break;
 8000b88:	e022      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f000 f8a5 	bl	8000cdc <OC2Config>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
      break;
 8000b96:	e01b      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f922 	bl	8000de4 <OC3Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8000ba4:	e014      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f99f 	bl	8000eec <OC4Config>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8000bb2:	e00d      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 fa04 	bl	8000fc4 <OC5Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8000bc0:	e006      	b.n	8000bd0 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 fa5f 	bl	8001088 <OC6Config>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8000bce:	bf00      	nop
  }

  return result;
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	f023 0201 	bic.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f023 0202 	bic.w	r2, r3, #2
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f023 0201 	bic.w	r2, r3, #1
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <OC1Config+0xf0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00b      	beq.n	8000c66 <OC1Config+0x8a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <OC1Config+0xf4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <OC1Config+0x8a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <OC1Config+0xf8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <OC1Config+0x8a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <OC1Config+0xfc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d11e      	bne.n	8000ca4 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f023 0208 	bic.w	r2, r3, #8
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4313      	orrs	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f023 0204 	bic.w	r2, r3, #4
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4313      	orrs	r3, r2
 8000c84:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fe69 	bl	800098e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40014000 	.word	0x40014000
 8000cd4:	40014400 	.word	0x40014400
 8000cd8:	40014800 	.word	0x40014800

08000cdc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	f023 0210 	bic.w	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	0212      	lsls	r2, r2, #8
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f023 0220 	bic.w	r2, r3, #32
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f023 0210 	bic.w	r2, r3, #16
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <OC2Config+0xf8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00b      	beq.n	8000d6c <OC2Config+0x90>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <OC2Config+0xfc>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <OC2Config+0x90>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <OC2Config+0x100>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d003      	beq.n	8000d6c <OC2Config+0x90>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <OC2Config+0x104>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d11f      	bne.n	8000dac <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	019b      	lsls	r3, r3, #6
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	019b      	lsls	r3, r3, #6
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fdf3 	bl	80009aa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40014000 	.word	0x40014000
 8000ddc:	40014400 	.word	0x40014400
 8000de0:	40014800 	.word	0x40014800

08000de4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <OC3Config+0xf8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00b      	beq.n	8000e72 <OC3Config+0x8e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <OC3Config+0xfc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <OC3Config+0x8e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <OC3Config+0x100>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d003      	beq.n	8000e72 <OC3Config+0x8e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <OC3Config+0x104>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11f      	bne.n	8000eb2 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	029b      	lsls	r3, r3, #10
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fd7e 	bl	80009c6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40014000 	.word	0x40014000
 8000ee4:	40014400 	.word	0x40014400
 8000ee8:	40014800 	.word	0x40014800

08000eec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f26:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	0212      	lsls	r2, r2, #8
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	031b      	lsls	r3, r3, #12
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	031b      	lsls	r3, r3, #12
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <OC4Config+0xc8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00b      	beq.n	8000f7c <OC4Config+0x90>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <OC4Config+0xcc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <OC4Config+0x90>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <OC4Config+0xd0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d003      	beq.n	8000f7c <OC4Config+0x90>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <OC4Config+0xd4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d107      	bne.n	8000f8c <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fd1f 	bl	80009e2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40014000 	.word	0x40014000
 8000fbc:	40014400 	.word	0x40014400
 8000fc0:	40014800 	.word	0x40014800

08000fc4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	4313      	orrs	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	4313      	orrs	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <OC5Config+0xb4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00b      	beq.n	8001040 <OC5Config+0x7c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <OC5Config+0xb8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <OC5Config+0x7c>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <OC5Config+0xbc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d003      	beq.n	8001040 <OC5Config+0x7c>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <OC5Config+0xc0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d109      	bne.n	8001054 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fccc 	bl	80009fe <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40012c00 	.word	0x40012c00
 800107c:	40014000 	.word	0x40014000
 8001080:	40014400 	.word	0x40014400
 8001084:	40014800 	.word	0x40014800

08001088 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	0212      	lsls	r2, r2, #8
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	051b      	lsls	r3, r3, #20
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	051b      	lsls	r3, r3, #20
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <OC6Config+0xb4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00b      	beq.n	8001106 <OC6Config+0x7e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <OC6Config+0xb8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <OC6Config+0x7e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <OC6Config+0xbc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d003      	beq.n	8001106 <OC6Config+0x7e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <OC6Config+0xc0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d109      	bne.n	800111a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fc77 	bl	8000a1a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40012c00 	.word	0x40012c00
 8001140:	40014000 	.word	0x40014000
 8001144:	40014400 	.word	0x40014400
 8001148:	40014800 	.word	0x40014800

0800114c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <LL_InitTick+0x30>)
 8001160:	3b01      	subs	r3, #1
 8001162:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_InitTick+0x30>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <LL_InitTick+0x30>)
 800116c:	2205      	movs	r2, #5
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e010 	.word	0xe000e010

08001180 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001188:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffdd 	bl	800114c <LL_InitTick>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <LL_mDelay+0x44>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80011aa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d00c      	beq.n	80011ce <LL_mDelay+0x32>
  {
    Delay++;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80011ba:	e008      	b.n	80011ce <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <LL_mDelay+0x44>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <LL_mDelay+0x32>
    {
      Delay--;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f3      	bne.n	80011bc <LL_mDelay+0x20>
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <LL_SetSystemCoreClock+0x1c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000

08001204 <LL_TIM_ClearFlag_UPDATE>:
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f06f 0201 	mvn.w	r2, #1
 8001212:	611a      	str	r2, [r3, #16]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f7ff ffdb 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f7ff ffd5 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800129c:	2102      	movs	r1, #2
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <resetSegments+0x58>)
 80012a0:	f7ff ffd1 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80012a4:	2120      	movs	r1, #32
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <resetSegments+0x58>)
 80012a8:	f7ff ffcd 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80012ac:	2110      	movs	r1, #16
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <resetSegments+0x58>)
 80012b0:	f7ff ffc9 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80012b4:	2101      	movs	r1, #1
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f7ff ffc4 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80012be:	2102      	movs	r1, #2
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f7ff ffbf 	bl	8001246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80012c8:	2108      	movs	r1, #8
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f7ff ffba 	bl	8001246 <LL_GPIO_SetOutputPin>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	48000400 	.word	0x48000400

080012dc <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80012e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f7ff ffbb 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f7ff ffb5 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80012f8:	2102      	movs	r1, #2
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <setSegments+0x58>)
 80012fc:	f7ff ffb1 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001300:	2120      	movs	r1, #32
 8001302:	480c      	ldr	r0, [pc, #48]	; (8001334 <setSegments+0x58>)
 8001304:	f7ff ffad 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001308:	2110      	movs	r1, #16
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <setSegments+0x58>)
 800130c:	f7ff ffa9 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001310:	2101      	movs	r1, #1
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f7ff ffa4 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800131a:	2102      	movs	r1, #2
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f7ff ff9f 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001324:	2108      	movs	r1, #8
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f7ff ff9a 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	48000400 	.word	0x48000400

08001338 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 800133c:	2104      	movs	r1, #4
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f7ff ff8e 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8001346:	2120      	movs	r1, #32
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f7ff ff89 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001350:	2110      	movs	r1, #16
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7ff ff84 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f7ff ff7f 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f7ff ff7a 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}

08001372 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001376:	2120      	movs	r1, #32
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f7ff ff63 	bl	8001246 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001380:	2110      	movs	r1, #16
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f7ff ff5e 	bl	8001246 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 800138a:	2140      	movs	r1, #64	; 0x40
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f7ff ff59 	bl	8001246 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001394:	2104      	movs	r1, #4
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f7ff ff54 	bl	8001246 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f7ff ff4f 	bl	8001246 <LL_GPIO_SetOutputPin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <setDecimalPoint>:

void setDecimalPoint(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 80013b0:	2102      	movs	r1, #2
 80013b2:	4802      	ldr	r0, [pc, #8]	; (80013bc <setDecimalPoint+0x10>)
 80013b4:	f7ff ff55 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	48000400 	.word	0x48000400

080013c0 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80013c4:	2101      	movs	r1, #1
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f7ff ff4a 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f7ff ff44 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <setTwo>:

void setTwo(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80013e4:	2101      	movs	r1, #1
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f7ff ff3a 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80013ee:	2102      	movs	r1, #2
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f7ff ff35 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80013f8:	2110      	movs	r1, #16
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <setTwo+0x38>)
 80013fc:	f7ff ff31 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f7ff ff2b 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800140c:	2120      	movs	r1, #32
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <setTwo+0x38>)
 8001410:	f7ff ff27 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	48000400 	.word	0x48000400

0800141c <setThree>:

void setThree(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001420:	2101      	movs	r1, #1
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f7ff ff1c 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800142a:	2102      	movs	r1, #2
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f7ff ff17 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001434:	2110      	movs	r1, #16
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <setThree+0x38>)
 8001438:	f7ff ff13 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800143c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f7ff ff0d 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001448:	2120      	movs	r1, #32
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <setThree+0x38>)
 800144c:	f7ff ff09 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	48000400 	.word	0x48000400

08001458 <setFour>:

void setFour(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800145c:	2108      	movs	r1, #8
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f7ff fefe 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001466:	2101      	movs	r1, #1
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f7ff fef9 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001470:	2110      	movs	r1, #16
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <setFour+0x30>)
 8001474:	f7ff fef5 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f7ff feef 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	48000400 	.word	0x48000400

0800148c <setFive>:

void setFive(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001490:	2108      	movs	r1, #8
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f7ff fee4 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800149a:	2120      	movs	r1, #32
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <setFive+0x38>)
 800149e:	f7ff fee0 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014a2:	2110      	movs	r1, #16
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <setFive+0x38>)
 80014a6:	f7ff fedc 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f7ff fed6 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014b6:	2102      	movs	r1, #2
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f7ff fed1 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	48000400 	.word	0x48000400

080014c8 <setSix>:

void setSix(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014cc:	2108      	movs	r1, #8
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f7ff fec6 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014d6:	2120      	movs	r1, #32
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <setSix+0x44>)
 80014da:	f7ff fec2 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014de:	2110      	movs	r1, #16
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <setSix+0x44>)
 80014e2:	f7ff febe 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f7ff feb8 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014f2:	2102      	movs	r1, #2
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f7ff feb3 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f7ff fead 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	48000400 	.word	0x48000400

08001510 <setSeven>:

void setSeven(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001514:	2101      	movs	r1, #1
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f7ff fea2 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f7ff fe9c 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800152a:	2102      	movs	r1, #2
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f7ff fe97 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <setEight>:

void setEight(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800153c:	2108      	movs	r1, #8
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f7ff fe8e 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001546:	2120      	movs	r1, #32
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <setEight+0x50>)
 800154a:	f7ff fe8a 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800154e:	2110      	movs	r1, #16
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <setEight+0x50>)
 8001552:	f7ff fe86 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff fe80 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001562:	2102      	movs	r1, #2
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f7ff fe7b 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800156c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f7ff fe75 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001578:	2101      	movs	r1, #1
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f7ff fe70 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	48000400 	.word	0x48000400

0800158c <setNine>:

void setNine(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001590:	2101      	movs	r1, #1
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f7ff fe64 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800159a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f7ff fe5e 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015a6:	2102      	movs	r1, #2
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f7ff fe59 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015b0:	2110      	movs	r1, #16
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <setNine+0x3c>)
 80015b4:	f7ff fe55 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015b8:	2108      	movs	r1, #8
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f7ff fe50 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	48000400 	.word	0x48000400

080015cc <setZero>:

void setZero(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015d0:	2108      	movs	r1, #8
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f7ff fe44 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015da:	2120      	movs	r1, #32
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <setZero+0x48>)
 80015de:	f7ff fe40 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f7ff fe3a 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015ee:	2102      	movs	r1, #2
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f7ff fe35 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f7ff fe2f 	bl	8001262 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001604:	2101      	movs	r1, #1
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f7ff fe2a 	bl	8001262 <LL_GPIO_ResetOutputPin>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	48000400 	.word	0x48000400

08001618 <displayNumber>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayNumber(double num)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0b00 	vstr	d0, [r7]
//	    	dDisplayData.digit[i] = (uint32_t)num % 10;
//	        num = num / 10;
//	        i++;
//	    }
//	}
	dDisplayData.digit_num = 4;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <displayNumber+0x40>)
 8001624:	2204      	movs	r2, #4
 8001626:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <displayNumber+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = 0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <displayNumber+0x40>)
 8001630:	2200      	movs	r2, #0
 8001632:	719a      	strb	r2, [r3, #6]
	dDisplayData.digit[3] = 1;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <displayNumber+0x40>)
 8001636:	2201      	movs	r2, #1
 8001638:	70da      	strb	r2, [r3, #3]
	dDisplayData.digit[2] = 3;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <displayNumber+0x40>)
 800163c:	2203      	movs	r2, #3
 800163e:	709a      	strb	r2, [r3, #2]
	dDisplayData.digit[1] = 3;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <displayNumber+0x40>)
 8001642:	2203      	movs	r2, #3
 8001644:	705a      	strb	r2, [r3, #1]
	dDisplayData.digit[0] = 7;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <displayNumber+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000024 	.word	0x20000024

0800165c <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d823      	bhi.n	80016b4 <setDigit+0x58>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <setDigit+0x18>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	08001685 	.word	0x08001685
 8001678:	08001691 	.word	0x08001691
 800167c:	0800169d 	.word	0x0800169d
 8001680:	080016a9 	.word	0x080016a9
	{
		case 0:
			DIGIT_4_ON;
 8001684:	2104      	movs	r1, #4
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f7ff fddc 	bl	8001246 <LL_GPIO_SetOutputPin>
			break;
 800168e:	e011      	b.n	80016b4 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f7ff fdd6 	bl	8001246 <LL_GPIO_SetOutputPin>
			break;
 800169a:	e00b      	b.n	80016b4 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 800169c:	2110      	movs	r1, #16
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f7ff fdd0 	bl	8001246 <LL_GPIO_SetOutputPin>
			break;
 80016a6:	e005      	b.n	80016b4 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 80016a8:	2120      	movs	r1, #32
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f7ff fdca 	bl	8001246 <LL_GPIO_SetOutputPin>
			break;
 80016b2:	bf00      	nop
	}
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e083      	b.n	80017d0 <updateDisplay+0x114>
	{
		switch(dDisplayData.digit[i])
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <updateDisplay+0x124>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	2b09      	cmp	r3, #9
 80016d0:	d85c      	bhi.n	800178c <updateDisplay+0xd0>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <updateDisplay+0x1c>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	08001701 	.word	0x08001701
 80016dc:	0800170f 	.word	0x0800170f
 80016e0:	0800171d 	.word	0x0800171d
 80016e4:	0800172b 	.word	0x0800172b
 80016e8:	08001739 	.word	0x08001739
 80016ec:	08001747 	.word	0x08001747
 80016f0:	08001755 	.word	0x08001755
 80016f4:	08001763 	.word	0x08001763
 80016f8:	08001771 	.word	0x08001771
 80016fc:	0800177f 	.word	0x0800177f
		{
			case 0:
			  setDigit(i);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffaa 	bl	800165c <setDigit>
			  setZero();
 8001708:	f7ff ff60 	bl	80015cc <setZero>
			  break;
 800170c:	e03e      	b.n	800178c <updateDisplay+0xd0>
			case 1:
			  setDigit(i);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ffa3 	bl	800165c <setDigit>
			  setOne();
 8001716:	f7ff fe53 	bl	80013c0 <setOne>
			  break;
 800171a:	e037      	b.n	800178c <updateDisplay+0xd0>
			case 2:
			  setDigit(i);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff9c 	bl	800165c <setDigit>
			  setTwo();
 8001724:	f7ff fe5c 	bl	80013e0 <setTwo>
			  break;
 8001728:	e030      	b.n	800178c <updateDisplay+0xd0>
			case 3:
			  setDigit(i);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff95 	bl	800165c <setDigit>
			  setThree();
 8001732:	f7ff fe73 	bl	800141c <setThree>
			  break;
 8001736:	e029      	b.n	800178c <updateDisplay+0xd0>
			case 4:
			  setDigit(i);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff8e 	bl	800165c <setDigit>
			  setFour();
 8001740:	f7ff fe8a 	bl	8001458 <setFour>
			  break;
 8001744:	e022      	b.n	800178c <updateDisplay+0xd0>
			case 5:
			  setDigit(i);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff87 	bl	800165c <setDigit>
			  setFive();
 800174e:	f7ff fe9d 	bl	800148c <setFive>
			  break;
 8001752:	e01b      	b.n	800178c <updateDisplay+0xd0>
			case 6:
			  setDigit(i);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff80 	bl	800165c <setDigit>
			  setSix();
 800175c:	f7ff feb4 	bl	80014c8 <setSix>
			  break;
 8001760:	e014      	b.n	800178c <updateDisplay+0xd0>
			case 7:
			  setDigit(i);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff79 	bl	800165c <setDigit>
			  setSeven();
 800176a:	f7ff fed1 	bl	8001510 <setSeven>
			  break;
 800176e:	e00d      	b.n	800178c <updateDisplay+0xd0>
			case 8:
			  setDigit(i);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff72 	bl	800165c <setDigit>
			  setEight();
 8001778:	f7ff fede 	bl	8001538 <setEight>
			  break;
 800177c:	e006      	b.n	800178c <updateDisplay+0xd0>
			case 9:
			  setDigit(i);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff6b 	bl	800165c <setDigit>
			  setNine();
 8001786:	f7ff ff01 	bl	800158c <setNine>
			  break;
 800178a:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <updateDisplay+0x124>)
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d101      	bne.n	800179a <updateDisplay+0xde>
		{
			setDecimalPoint();
 8001796:	f7ff fe09 	bl	80013ac <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <updateDisplay+0x128>)
 800179c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <updateDisplay+0x12c>)
 80017a2:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 80017a6:	bf00      	nop
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <updateDisplay+0x12c>)
 80017aa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80017ae:	1c8b      	adds	r3, r1, #2
 80017b0:	f142 0400 	adc.w	r4, r2, #0
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <updateDisplay+0x128>)
 80017b6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80017ba:	42a2      	cmp	r2, r4
 80017bc:	bf08      	it	eq
 80017be:	4299      	cmpeq	r1, r3
 80017c0:	d3f2      	bcc.n	80017a8 <updateDisplay+0xec>

		resetDigits();
 80017c2:	f7ff fdb9 	bl	8001338 <resetDigits>
		resetSegments();
 80017c6:	f7ff fd5b 	bl	8001280 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	3301      	adds	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	f67f af78 	bls.w	80016c8 <updateDisplay+0xc>
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000024 	.word	0x20000024
 80017e4:	20000030 	.word	0x20000030
 80017e8:	20000038 	.word	0x20000038

080017ec <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <TIM3_IRQHandler+0x20>)
 80017f2:	f7ff fd15 	bl	8001220 <LL_TIM_IsActiveFlag_UPDATE>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 80017fc:	f7ff ff5e 	bl	80016bc <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM3_IRQHandler+0x20>)
 8001802:	f7ff fcff 	bl	8001204 <LL_TIM_ClearFlag_UPDATE>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40000400 	.word	0x40000400

08001810 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000

08001840 <LL_GPIO_ResetOutputPin>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001872:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001876:	f7ff ffcb 	bl	8001810 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800187a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800187e:	f7ff ffc7 	bl	8001810 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001882:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f7ff ffd9 	bl	8001840 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800188e:	2132      	movs	r1, #50	; 0x32
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <MX_GPIO_Init+0x84>)
 8001892:	f7ff ffd5 	bl	8001840 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001896:	f640 13ff 	movw	r3, #2559	; 0x9ff
 800189a:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f7fe ffc7 	bl	8000846 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80018b8:	2332      	movs	r3, #50	; 0x32
 80018ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018bc:	2301      	movs	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_GPIO_Init+0x84>)
 80018d2:	f7fe ffb8 	bl	8000846 <LL_GPIO_Init>

}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48000400 	.word	0x48000400

080018e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <LL_RCC_HSI_Enable+0x1c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <LL_RCC_HSI_Enable+0x1c>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <LL_RCC_HSI_IsReady+0x20>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b02      	cmp	r3, #2
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000

08001970 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <LL_RCC_SetSysClkSource+0x24>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 0203 	bic.w	r2, r3, #3
 80019ac:	4904      	ldr	r1, [pc, #16]	; (80019c0 <LL_RCC_SetSysClkSource+0x24>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000

080019c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <LL_RCC_GetSysClkSource+0x18>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <LL_RCC_SetAHBPrescaler+0x24>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	4904      	ldr	r1, [pc, #16]	; (8001a04 <LL_RCC_SetAHBPrescaler+0x24>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000

08001a08 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a18:	4904      	ldr	r1, [pc, #16]	; (8001a2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000

08001a30 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a40:	4904      	ldr	r1, [pc, #16]	; (8001a54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000

08001a88 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <LL_FLASH_SetLatency+0x24>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	4904      	ldr	r1, [pc, #16]	; (8001adc <LL_FLASH_SetLatency+0x24>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40022000 	.word	0x40022000

08001ae0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <LL_FLASH_GetLatency+0x18>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d106      	bne.n	8001b18 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <LL_SYSTICK_SetClkSource+0x34>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <LL_SYSTICK_SetClkSource+0x34>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001b16:	e005      	b.n	8001b24 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_SYSTICK_SetClkSource+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <LL_SYSTICK_SetClkSource+0x34>)
 8001b1e:	f023 0304 	bic.w	r3, r3, #4
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_SYSTICK_EnableIT+0x1c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <LL_SYSTICK_EnableIT+0x1c>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010
 8001b54:	00000000 	.word	0x00000000

08001b58 <main>:

uint64_t saved_time;
double num_to_display = 0;

int main(void)
{
 8001b58:	b598      	push	{r3, r4, r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7ff ff93 	bl	8001a88 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b66:	f7ff ff77 	bl	8001a58 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff feba 	bl	80018e4 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001b70:	f000 f85a 	bl	8001c28 <SystemClock_Config>

  MX_GPIO_Init();
 8001b74:	f7ff fe72 	bl	800185c <MX_GPIO_Init>

  setSegments();
 8001b78:	f7ff fbb0 	bl	80012dc <setSegments>
  setDigits();
 8001b7c:	f7ff fbf9 	bl	8001372 <setDigits>

  LL_mDelay(2000);
 8001b80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b84:	f7ff fb0a 	bl	800119c <LL_mDelay>

  resetDigits();
 8001b88:	f7ff fbd6 	bl	8001338 <resetDigits>
  resetSegments();
 8001b8c:	f7ff fb78 	bl	8001280 <resetSegments>

  MX_TIM3_Init();
 8001b90:	f000 fa62 	bl	8002058 <MX_TIM3_Init>

  while (1)
  {
	  if(disp_time > (saved_time + 100))
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <main+0xc0>)
 8001b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b9a:	f113 0164 	adds.w	r1, r3, #100	; 0x64
 8001b9e:	f144 0200 	adc.w	r2, r4, #0
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <main+0xc4>)
 8001ba4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ba8:	42a2      	cmp	r2, r4
 8001baa:	bf08      	it	eq
 8001bac:	4299      	cmpeq	r1, r3
 8001bae:	d2f1      	bcs.n	8001b94 <main+0x3c>
	  {
		  displayNumber(num_to_display);
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <main+0xc8>)
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bba:	eef0 0a67 	vmov.f32	s1, s15
 8001bbe:	f7ff fd2b 	bl	8001618 <displayNumber>
	  	  num_to_display -= 0.10;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <main+0xc8>)
 8001bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc8:	a311      	add	r3, pc, #68	; (adr r3, 8001c10 <main+0xb8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe faff 	bl	80001d0 <__aeabi_dsub>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <main+0xc8>)
 8001bd8:	e9c2 3400 	strd	r3, r4, [r2]
	  	  saved_time = disp_time;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <main+0xc4>)
 8001bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <main+0xc0>)
 8001be4:	e9c2 3400 	strd	r3, r4, [r2]

	  	  if(num_to_display <= 0)
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <main+0xc8>)
 8001bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f7fe fd0d 	bl	8000614 <__aeabi_dcmple>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <main+0xb4>
	  	  {
	  		  num_to_display = 100;
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <main+0xc8>)
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	4c07      	ldr	r4, [pc, #28]	; (8001c24 <main+0xcc>)
 8001c08:	e9c2 3400 	strd	r3, r4, [r2]
	  if(disp_time > (saved_time + 100))
 8001c0c:	e7c2      	b.n	8001b94 <main+0x3c>
 8001c0e:	bf00      	nop
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fb99999 	.word	0x3fb99999
 8001c18:	20000048 	.word	0x20000048
 8001c1c:	20000030 	.word	0x20000030
 8001c20:	20000040 	.word	0x20000040
 8001c24:	40590000 	.word	0x40590000

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff ff43 	bl	8001ab8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001c32:	f7ff ff55 	bl	8001ae0 <LL_FLASH_GetLatency>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001c3c:	f000 f82c 	bl	8001c98 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001c40:	f7ff fe74 	bl	800192c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c44:	bf00      	nop
 8001c46:	f7ff fe81 	bl	800194c <LL_RCC_HSI_IsReady>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d1fa      	bne.n	8001c46 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c50:	2010      	movs	r0, #16
 8001c52:	f7ff fe8d 	bl	8001970 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fec2 	bl	80019e0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fed3 	bl	8001a08 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fee4 	bl	8001a30 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fe97 	bl	800199c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c6e:	bf00      	nop
 8001c70:	f7ff fea8 	bl	80019c4 <LL_RCC_GetSysClkSource>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1fa      	bne.n	8001c70 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <SystemClock_Config+0x6c>)
 8001c7c:	f7ff fa80 	bl	8001180 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001c80:	2004      	movs	r0, #4
 8001c82:	f7ff ff3b 	bl	8001afc <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8001c86:	f7ff ff55 	bl	8001b34 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <SystemClock_Config+0x6c>)
 8001c8c:	f7ff faaa 	bl	80011e4 <LL_SetSystemCoreClock>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <HardFault_Handler+0x4>

08001cba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <UsageFault_Handler+0x4>

08001ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b490      	push	{r4, r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SysTick_Handler+0x20>)
 8001cfe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d02:	1c4b      	adds	r3, r1, #1
 8001d04:	f142 0400 	adc.w	r4, r2, #0
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <SysTick_Handler+0x20>)
 8001d0a:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc90      	pop	{r4, r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000030 	.word	0x20000030

08001d1c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <SystemInit+0x84>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <SystemInit+0x84>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <SystemInit+0x88>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <SystemInit+0x88>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <SystemInit+0x88>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4918      	ldr	r1, [pc, #96]	; (8001da4 <SystemInit+0x88>)
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <SystemInit+0x8c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <SystemInit+0x88>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <SystemInit+0x88>)
 8001d4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <SystemInit+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <SystemInit+0x88>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <SystemInit+0x88>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <SystemInit+0x88>)
 8001d6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d6e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <SystemInit+0x88>)
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <SystemInit+0x88>)
 8001d76:	f023 030f 	bic.w	r3, r3, #15
 8001d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <SystemInit+0x88>)
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d80:	4908      	ldr	r1, [pc, #32]	; (8001da4 <SystemInit+0x88>)
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <SystemInit+0x90>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <SystemInit+0x88>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0x84>)
 8001d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d94:	609a      	str	r2, [r3, #8]
#endif
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	f87fc00c 	.word	0xf87fc00c
 8001dac:	ff00fccc 	.word	0xff00fccc

08001db0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <NVIC_EnableIRQ+0x30>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da0b      	bge.n	8001e2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <NVIC_SetPriority+0x4c>)
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	3b04      	subs	r3, #4
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2a:	e009      	b.n	8001e40 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <NVIC_SetPriority+0x50>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <LL_APB1_GRP1_EnableClock>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <LL_TIM_EnableCounter>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_TIM_EnableARRPreload>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_TIM_OC_DisableFast>:
{
 8001f2c:	b4b0      	push	{r4, r5, r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d028      	beq.n	8001f8e <LL_TIM_OC_DisableFast+0x62>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d023      	beq.n	8001f8a <LL_TIM_OC_DisableFast+0x5e>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d01e      	beq.n	8001f86 <LL_TIM_OC_DisableFast+0x5a>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d019      	beq.n	8001f82 <LL_TIM_OC_DisableFast+0x56>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f54:	d013      	beq.n	8001f7e <LL_TIM_OC_DisableFast+0x52>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d00d      	beq.n	8001f7a <LL_TIM_OC_DisableFast+0x4e>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f64:	d007      	beq.n	8001f76 <LL_TIM_OC_DisableFast+0x4a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d101      	bne.n	8001f72 <LL_TIM_OC_DisableFast+0x46>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00e      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f72:	2308      	movs	r3, #8
 8001f74:	e00c      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e00a      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_TIM_OC_DisableFast+0x64>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3318      	adds	r3, #24
 8001f96:	461a      	mov	r2, r3
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LL_TIM_OC_DisableFast+0x94>)
 8001f9c:	5c5b      	ldrb	r3, [r3, r1]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001fa2:	6822      	ldr	r2, [r4, #0]
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <LL_TIM_OC_DisableFast+0x98>)
 8001fa8:	5c5b      	ldrb	r3, [r3, r1]
 8001faa:	4619      	mov	r1, r3
 8001fac:	2304      	movs	r3, #4
 8001fae:	408b      	lsls	r3, r1
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	6023      	str	r3, [r4, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bcb0      	pop	{r4, r5, r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	080021e0 	.word	0x080021e0
 8001fc4:	080021ec 	.word	0x080021ec

08001fc8 <LL_TIM_SetClockSource>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001fda:	f023 0307 	bic.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_TIM_SetTriggerOutput>:
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_TIM_DisableMasterSlaveMode>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_TIM_EnableIT_UPDATE>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2220      	movs	r2, #32
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f89f 	bl	80021b8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800207a:	2002      	movs	r0, #2
 800207c:	f7ff ff1e 	bl	8001ebc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8002080:	f7ff fe96 	bl	8001db0 <NVIC_GetPriorityGrouping>
 8002084:	4603      	mov	r3, r0
 8002086:	2202      	movs	r2, #2
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee2 	bl	8001e54 <NVIC_EncodePriority>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	201d      	movs	r0, #29
 8002096:	f7ff feb3 	bl	8001e00 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800209a:	201d      	movs	r0, #29
 800209c:	f7ff fe96 	bl	8001dcc <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80020a0:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80020a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 80020aa:	2313      	movs	r3, #19
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	4817      	ldr	r0, [pc, #92]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020ba:	f7fe fccd 	bl	8000a58 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020c0:	f7ff ff24 	bl	8001f0c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4814      	ldr	r0, [pc, #80]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020c8:	f7ff ff7e 	bl	8001fc8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80020cc:	2310      	movs	r3, #16
 80020ce:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	461a      	mov	r2, r3
 80020e4:	2101      	movs	r1, #1
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020e8:	f7fe fd2a 	bl	8000b40 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80020ec:	2101      	movs	r1, #1
 80020ee:	480a      	ldr	r0, [pc, #40]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020f0:	f7ff ff1c 	bl	8001f2c <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80020f4:	2100      	movs	r1, #0
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020f8:	f7ff ff7b 	bl	8001ff2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80020fc:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_TIM3_Init+0xc0>)
 80020fe:	f7ff ff8b 	bl	8002018 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_TIM3_Init+0xc0>)
 8002104:	f7ff ff98 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <MX_TIM3_Init+0xc0>)
 800210a:	f7ff feef 	bl	8001eec <LL_TIM_EnableCounter>

}
 800210e:	bf00      	nop
 8002110:	3738      	adds	r7, #56	; 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40000400 	.word	0x40000400

0800211c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <LoopForever+0xa>)
	ldr	r3, =_edata
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
	ldr	r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800213a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <LoopForever+0x16>)
	cmp	r2, r3
 8002142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002146:	f7ff fde9 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f000 f811 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214e:	f7ff fd03 	bl	8001b58 <main>

08002152 <LoopForever>:

LoopForever:
    b LoopForever
 8002152:	e7fe      	b.n	8002152 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002154:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002158:	08002200 	.word	0x08002200
	ldr	r0, =_sdata
 800215c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002160:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002164:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002168:	20000050 	.word	0x20000050

0800216c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC1_2_IRQHandler>
	...

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4e0d      	ldr	r6, [pc, #52]	; (80021a8 <__libc_init_array+0x38>)
 8002174:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002176:	1ba4      	subs	r4, r4, r6
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2500      	movs	r5, #0
 800217c:	42a5      	cmp	r5, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	4e0b      	ldr	r6, [pc, #44]	; (80021b0 <__libc_init_array+0x40>)
 8002182:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <__libc_init_array+0x44>)
 8002184:	f000 f820 	bl	80021c8 <_init>
 8002188:	1ba4      	subs	r4, r4, r6
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	2500      	movs	r5, #0
 800218e:	42a5      	cmp	r5, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002198:	4798      	blx	r3
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a2:	4798      	blx	r3
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	080021f8 	.word	0x080021f8
 80021ac:	080021f8 	.word	0x080021f8
 80021b0:	080021f8 	.word	0x080021f8
 80021b4:	080021fc 	.word	0x080021fc

080021b8 <memset>:
 80021b8:	4402      	add	r2, r0
 80021ba:	4603      	mov	r3, r0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <memset+0xa>
 80021c0:	4770      	bx	lr
 80021c2:	f803 1b01 	strb.w	r1, [r3], #1
 80021c6:	e7f9      	b.n	80021bc <memset+0x4>

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
